"""
2864. Maximum Odd Binary Number

Easy

You are given a binary string s that contains at least one '1'.

You have to rearrange the bits in such a way that the resulting binary number is the maximum odd binary number that can be created from this combination.

Return a string representing the maximum odd binary number that can be created from the given combination.

Note that the resulting string can have leading zeros.



Example 1:

Input: s = "010"
Output: "001"
Explanation: Because there is just one '1', it must be in the last position. So the answer is "001".
Example 2:

Input: s = "0101"
Output: "1001"
Explanation: One of the '1's must be in the last position. The maximum number that can be made with the remaining digits is "100". So the answer is "1001".


Constraints:

1 <= s.length <= 100
s consists only of '0' and '1'.
s contains at least one '1'.

"""

class Solution:

    def maximumOddBinaryNumber(self, s: str) -> str:
        count_ones = s.count('1')

        # Construct the resulting string
        result = '1' * (count_ones - 1) + '0' * (len(s) - count_ones) + '1'

        return result


"""
# Simple Step by step approach

s = "001"

print(s)
print(len(s))
a = 0
b = 0
for i in s:
    print (i)
    if i == '1':
        a += 1
        print("a = ", a)
    else:
        b += 1
        print("b = ", b)

print('1'* (a-1) +'0'*b+ '1')

print(a , b)
"""
